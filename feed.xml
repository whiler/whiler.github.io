<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>轨迹/trace</title><link href="https://whiler.github.io/" rel="alternate"></link><link href="https://whiler.github.io/feed.xml" rel="self"></link><id>https://whiler.github.io/</id><updated>2018-05-21T00:00:00+08:00</updated><subtitle>I leave no trace of wings in the air, but I am glad I have had my flight.</subtitle><entry><title>把一张纸撕成一个纸圈</title><link href="https://whiler.github.io/paper-circle.html" rel="alternate"></link><published>2018-05-21T00:00:00+08:00</published><updated>2018-05-21T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2018-05-21:/paper-circle.html</id><summary type="html">&lt;p&gt;不用任何粘接工具，把一张纸撕成一个纸圈&lt;/p&gt;</summary><content type="html">&lt;p&gt;一次培训的放松环节，导师让我们在 5 分钟内，把一张纸撕成一个纸圈，围住我们所有人。&lt;/p&gt;
&lt;p&gt;我做到了。&lt;/p&gt;
&lt;p&gt;一张纸从中间开始撕，能撕成一个闭合的圈。如图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="纸圈" src="https://whiler.github.io/assets/images/circle.jpg" title="一张纸从中间开始撕，能撕成一个闭合的圈"&gt;&lt;/p&gt;
&lt;p&gt;从边上撕能得到纸条，而不是闭合的圈。如图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="纸条" src="https://whiler.github.io/assets/images/strip.jpg" title="从边上撕能得到纸条，而不是闭合的圈"&gt;&lt;/p&gt;
&lt;p&gt;从中间撕能得到一个圈，周长最大也只能是纸的周长，不能围住所有人。
从边上撕能得到一个纸条，只要撕得足够细，纸条可以就可以足够的长，首尾相连形成圈就能围住所有人了。
但是，怎么连呢？&lt;/p&gt;
&lt;p&gt;对折！&lt;/p&gt;
&lt;p&gt;对折后从中间撕一个口子，展开就是一个圈了。如图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="对折" src="https://whiler.github.io/assets/images/fold-1.jpg" title="对折"&gt;
&lt;img alt="撕一个口子" src="https://whiler.github.io/assets/images/fold-2.jpg" title="撕一个口子"&gt;
&lt;img alt="圈" src="https://whiler.github.io/assets/images/fold-3.jpg" title="得到一个圈"&gt;&lt;/p&gt;
&lt;p&gt;能不能把这个圈的周长变得更大一些呢？&lt;/p&gt;
&lt;p&gt;能，对折后从折线一边开始，左右交替撕奇数个口子；把折线上除第一个和最后一个折痕撕开，展开就能得到周长更长的圈了。如图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="左右交替撕奇数个口子" src="https://whiler.github.io/assets/images/tear.jpg" title="左右交替撕奇数个口子，把折线上除第一个和最后一个折痕撕开"&gt;
&lt;img alt="展开" src="https://whiler.github.io/assets/images/unfold.jpg" title="展开，得到一个圈"&gt;&lt;/p&gt;
&lt;p&gt;假设纸的周长是 d ，圈的周长是 D ，对折一次，左右交替撕奇数 &lt;span class="arithmatex"&gt;\(N = 2 * n - 1\)&lt;/span&gt; 个口子，那么纸圈的周长可以表示为：&lt;/p&gt;
&lt;div class="arithmatex"&gt;\[D = (N + 1) / 2 *d\]&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>「虚构」村里出了命案</title><link href="https://whiler.github.io/fictional-homicide.html" rel="alternate"></link><published>2018-04-27T00:00:00+08:00</published><updated>2018-04-27T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2018-04-27:/fictional-homicide.html</id><summary type="html">&lt;p&gt;「虚构」村里出了命案，张三杀了李四。&lt;/p&gt;</summary><content type="html">&lt;p&gt;这是一个虚构的故事。&lt;/p&gt;
&lt;p&gt;村长！出命案了！&lt;br&gt;
张三杀了李四！该拉出去枪毙！&lt;br&gt;
等等，是李四先杀了张三的老婆！&lt;br&gt;
再等等，是张三老婆借了李四 200 块钱，没还！&lt;br&gt;
村长，张三该怎么处理？&lt;br&gt;
欠钱不还还杀人！没有王法了？枪毙！&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>写了一个简单的拼图游戏</title><link href="https://whiler.github.io/puzzle.html" rel="alternate"></link><published>2018-04-14T00:00:00+08:00</published><updated>2018-05-05T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2018-04-14:/puzzle.html</id><summary type="html">&lt;p&gt;用 HTML/JavaScript/CSS 写了一个简单的拼图游戏。&lt;/p&gt;</summary><content type="html">&lt;p&gt;游戏地址： &lt;a href="./html/puzzle/"&gt;拼图/Puzzle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;早就想写一个拼图游戏了，以前被 &lt;code&gt;生成的拼图没法还原&lt;/code&gt; 的问题唬住了，迟迟没能动手写。
今天抽了几个小时做了一个简单的拼图游戏。&lt;/p&gt;
&lt;p&gt;随机生成的拼图不一定能还原，但是可以通过 &lt;strong&gt;从还原好的拼图随机打乱&lt;/strong&gt; 的方式生成拼图。
这样，生成的拼图 100% 能还原，解决了 &lt;code&gt;生成的拼图没法还原&lt;/code&gt; 的问题。&lt;/p&gt;
&lt;p&gt;在 &lt;strong&gt;从还原好的拼图随机打乱&lt;/strong&gt; 时遇到一个棘手的问题，白块总是「原地踏步」——白块平均概率向四个方向移动，走了一圈又回到了原位。
找到一个不是很完美的解决办法，通过白块当前的位置动态计算向四个方向移动的概率，然后按照四个方向不同的概率移动，终于走出起始点了。
但是，当白块移动到正中央的时候四个方向的概率又相同了，又有「原地踏步」的可能。
目前没有想到其他更好的办法。&lt;/p&gt;
&lt;p&gt;没有 &lt;strong&gt;自动还原&lt;/strong&gt; 功能时，总想着把这个功能加上，费劲实现这个功能后就不再想亲自好好玩一把拼图了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动还原&lt;/strong&gt; 功能其实并不难，前期调研时候就知道可以用 &lt;em&gt;A 星&lt;/em&gt; 算法实现，难在学习和实现这个算法上了，还有 &lt;em&gt;A 星&lt;/em&gt; 依赖的 &lt;em&gt;二叉堆&lt;/em&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src="data:image/svg+xml;charset=utf-8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIKICJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGQiPgo8IS0tIEdlbmVyYXRlZCBieSBncmFwaHZpeiB2ZXJzaW9uIDIuNDMuMCAoMCkKIC0tPgo8IS0tIFRpdGxlOiBBU3RhciBQYWdlczogMSAtLT4KPHN2ZyB3aWR0aD0iMjc4cHQiIGhlaWdodD0iMjE2cHQiCiB2aWV3Qm94PSIwLjAwIDAuMDAgMjc4LjAwIDIxNi4wMCIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayI+CjxnIGlkPSJncmFwaDAiIGNsYXNzPSJncmFwaCIgdHJhbnNmb3JtPSJzY2FsZSgxIDEpIHJvdGF0ZSgwKSB0cmFuc2xhdGUoNCAyMTIpIj4KPHRpdGxlPkFTdGFyPC90aXRsZT4KPCEtLSBTIC0tPgo8ZyBpZD0ibm9kZTEiIGNsYXNzPSJub2RlIj4KPHRpdGxlPlM8L3RpdGxlPgo8ZWxsaXBzZSBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBjeD0iMTM1IiBjeT0iLTE5MCIgcng9IjI3IiByeT0iMTgiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMTM1IiB5PSItMTg1LjgiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+UzwvdGV4dD4KPC9nPgo8IS0tIEEgLS0+CjxnIGlkPSJub2RlMiIgY2xhc3M9Im5vZGUiPgo8dGl0bGU+QTwvdGl0bGU+CjxlbGxpcHNlIGZpbGw9Im5vbmUiIHN0cm9rZT0iYmxhY2siIGN4PSIyNyIgY3k9Ii0xMDQiIHJ4PSIyNyIgcnk9IjE4Ii8+Cjx0ZXh0IHRleHQtYW5jaG9yPSJtaWRkbGUiIHg9IjI3IiB5PSItOTkuOCIgZm9udC1mYW1pbHk9IlRpbWVzLHNlcmlmIiBmb250LXNpemU9IjE0LjAwIj5BPC90ZXh0Pgo8L2c+CjwhLS0gUyYjNDU7Jmd0O0EgLS0+CjxnIGlkPSJlZGdlMSIgY2xhc3M9ImVkZ2UiPgo8dGl0bGU+UyYjNDU7Jmd0O0E8L3RpdGxlPgo8cGF0aCBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBkPSJNMTE4LjEyLC0xNzUuODhDMTAwLjQsLTE2Mi4wOSA3Mi4zMiwtMTQwLjI1IDUyLjAyLC0xMjQuNDYiLz4KPHBvbHlnb24gZmlsbD0iYmxhY2siIHN0cm9rZT0iYmxhY2siIHBvaW50cz0iNTQuMTYsLTEyMS42OSA0NC4xMSwtMTE4LjMxIDQ5Ljg2LC0xMjcuMjEgNTQuMTYsLTEyMS42OSIvPgo8dGV4dCB0ZXh0LWFuY2hvcj0ibWlkZGxlIiB4PSI5NSIgeT0iLTE0Mi44IiBmb250LWZhbWlseT0iVGltZXMsc2VyaWYiIGZvbnQtc2l6ZT0iMTQuMDAiPjEwPC90ZXh0Pgo8L2c+CjwhLS0gQiAtLT4KPGcgaWQ9Im5vZGUzIiBjbGFzcz0ibm9kZSI+Cjx0aXRsZT5CPC90aXRsZT4KPGVsbGlwc2UgZmlsbD0ibm9uZSIgc3Ryb2tlPSJibGFjayIgY3g9Ijk5IiBjeT0iLTEwNCIgcng9IjI3IiByeT0iMTgiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iOTkiIHk9Ii05OS44IiBmb250LWZhbWlseT0iVGltZXMsc2VyaWYiIGZvbnQtc2l6ZT0iMTQuMDAiPkI8L3RleHQ+CjwvZz4KPCEtLSBTJiM0NTsmZ3Q7QiAtLT4KPGcgaWQ9ImVkZ2UyIiBjbGFzcz0iZWRnZSI+Cjx0aXRsZT5TJiM0NTsmZ3Q7QjwvdGl0bGU+CjxwYXRoIGZpbGw9Im5vbmUiIHN0cm9rZT0iYmxhY2siIGQ9Ik0xMjcuODksLTE3Mi40QzEyMi44MSwtMTYwLjU1IDExNS44OCwtMTQ0LjM4IDExMC4wOCwtMTMwLjg1Ii8+Cjxwb2x5Z29uIGZpbGw9ImJsYWNrIiBzdHJva2U9ImJsYWNrIiBwb2ludHM9IjExMy4yNSwtMTI5LjM3IDEwNi4xLC0xMjEuNTYgMTA2LjgyLC0xMzIuMTMgMTEzLjI1LC0xMjkuMzciLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMTI3IiB5PSItMTQyLjgiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+MTA8L3RleHQ+CjwvZz4KPCEtLSBDIC0tPgo8ZyBpZD0ibm9kZTQiIGNsYXNzPSJub2RlIj4KPHRpdGxlPkM8L3RpdGxlPgo8ZWxsaXBzZSBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBjeD0iMTcxIiBjeT0iLTEwNCIgcng9IjI3IiByeT0iMTgiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMTcxIiB5PSItOTkuOCIgZm9udC1mYW1pbHk9IlRpbWVzLHNlcmlmIiBmb250LXNpemU9IjE0LjAwIj5DPC90ZXh0Pgo8L2c+CjwhLS0gUyYjNDU7Jmd0O0MgLS0+CjxnIGlkPSJlZGdlMyIgY2xhc3M9ImVkZ2UiPgo8dGl0bGU+UyYjNDU7Jmd0O0M8L3RpdGxlPgo8cGF0aCBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBkPSJNMTQyLjExLC0xNzIuNEMxNDcuMTksLTE2MC41NSAxNTQuMTIsLTE0NC4zOCAxNTkuOTIsLTEzMC44NSIvPgo8cG9seWdvbiBmaWxsPSJibGFjayIgc3Ryb2tlPSJibGFjayIgcG9pbnRzPSIxNjMuMTgsLTEzMi4xMyAxNjMuOSwtMTIxLjU2IDE1Ni43NSwtMTI5LjM3IDE2My4xOCwtMTMyLjEzIi8+Cjx0ZXh0IHRleHQtYW5jaG9yPSJtaWRkbGUiIHg9IjE2MiIgeT0iLTE0Mi44IiBmb250LWZhbWlseT0iVGltZXMsc2VyaWYiIGZvbnQtc2l6ZT0iMTQuMDAiPjEwPC90ZXh0Pgo8L2c+CjwhLS0gRCAtLT4KPGcgaWQ9Im5vZGU1IiBjbGFzcz0ibm9kZSI+Cjx0aXRsZT5EPC90aXRsZT4KPGVsbGlwc2UgZmlsbD0ibm9uZSIgc3Ryb2tlPSJibGFjayIgY3g9IjI0MyIgY3k9Ii0xMDQiIHJ4PSIyNyIgcnk9IjE4Ii8+Cjx0ZXh0IHRleHQtYW5jaG9yPSJtaWRkbGUiIHg9IjI0MyIgeT0iLTk5LjgiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+RDwvdGV4dD4KPC9nPgo8IS0tIFMmIzQ1OyZndDtEIC0tPgo8ZyBpZD0iZWRnZTQiIGNsYXNzPSJlZGdlIj4KPHRpdGxlPlMmIzQ1OyZndDtEPC90aXRsZT4KPHBhdGggZmlsbD0ibm9uZSIgc3Ryb2tlPSJibGFjayIgZD0iTTE1MS44OCwtMTc1Ljg4QzE2OS42LC0xNjIuMDkgMTk3LjY4LC0xNDAuMjUgMjE3Ljk4LC0xMjQuNDYiLz4KPHBvbHlnb24gZmlsbD0iYmxhY2siIHN0cm9rZT0iYmxhY2siIHBvaW50cz0iMjIwLjE0LC0xMjcuMjEgMjI1Ljg5LC0xMTguMzEgMjE1Ljg0LC0xMjEuNjkgMjIwLjE0LC0xMjcuMjEiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMjAyIiB5PSItMTQyLjgiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+MTA8L3RleHQ+CjwvZz4KPCEtLSBFIC0tPgo8ZyBpZD0ibm9kZTYiIGNsYXNzPSJub2RlIj4KPHRpdGxlPkU8L3RpdGxlPgo8ZWxsaXBzZSBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBjeD0iOTkiIGN5PSItMTgiIHJ4PSIyNyIgcnk9IjE4Ii8+Cjx0ZXh0IHRleHQtYW5jaG9yPSJtaWRkbGUiIHg9Ijk5IiB5PSItMTMuOCIgZm9udC1mYW1pbHk9IlRpbWVzLHNlcmlmIiBmb250LXNpemU9IjE0LjAwIj5FPC90ZXh0Pgo8L2c+CjwhLS0gQSYjNDU7Jmd0O0UgLS0+CjxnIGlkPSJlZGdlNSIgY2xhc3M9ImVkZ2UiPgo8dGl0bGU+QSYjNDU7Jmd0O0U8L3RpdGxlPgo8cGF0aCBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBzdHJva2UtZGFzaGFycmF5PSI1LDIiIGQ9Ik0zOS44NywtODcuOThDNTAuOTMsLTc1LjA4IDY3LjA0LC01Ni4yOSA3OS42NSwtNDEuNTgiLz4KPHBvbHlnb24gZmlsbD0iYmxhY2siIHN0cm9rZT0iYmxhY2siIHBvaW50cz0iODIuMzksLTQzLjc2IDg2LjI0LC0zMy44OSA3Ny4wNywtMzkuMiA4Mi4zOSwtNDMuNzYiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iNzUiIHk9Ii01Ni44IiBmb250LWZhbWlseT0iVGltZXMsc2VyaWYiIGZvbnQtc2l6ZT0iMTQuMDAiPjEwPC90ZXh0Pgo8L2c+CjwhLS0gQiYjNDU7Jmd0O0UgLS0+CjxnIGlkPSJlZGdlNiIgY2xhc3M9ImVkZ2UiPgo8dGl0bGU+QiYjNDU7Jmd0O0U8L3RpdGxlPgo8cGF0aCBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBzdHJva2UtZGFzaGFycmF5PSI1LDIiIGQ9Ik05OSwtODUuNkM5OSwtNzQuMjYgOTksLTU5LjIzIDk5LC00Ni4zMiIvPgo8cG9seWdvbiBmaWxsPSJibGFjayIgc3Ryb2tlPSJibGFjayIgcG9pbnRzPSIxMDIuNSwtNDYuMSA5OSwtMzYuMSA5NS41LC00Ni4xIDEwMi41LC00Ni4xIi8+Cjx0ZXh0IHRleHQtYW5jaG9yPSJtaWRkbGUiIHg9IjEwNiIgeT0iLTU2LjgiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+MjA8L3RleHQ+CjwvZz4KPCEtLSBDJiM0NTsmZ3Q7RSAtLT4KPGcgaWQ9ImVkZ2U3IiBjbGFzcz0iZWRnZSI+Cjx0aXRsZT5DJiM0NTsmZ3Q7RTwvdGl0bGU+CjxwYXRoIGZpbGw9Im5vbmUiIHN0cm9rZT0iYmxhY2siIHN0cm9rZS1kYXNoYXJyYXk9IjUsMiIgZD0iTTE1OC4xMywtODcuOThDMTQ3LjA3LC03NS4wOCAxMzAuOTYsLTU2LjI5IDExOC4zNSwtNDEuNTgiLz4KPHBvbHlnb24gZmlsbD0iYmxhY2siIHN0cm9rZT0iYmxhY2siIHBvaW50cz0iMTIwLjkzLC0zOS4yIDExMS43NiwtMzMuODkgMTE1LjYxLC00My43NiAxMjAuOTMsLTM5LjIiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMTQ2IiB5PSItNTYuOCIgZm9udC1mYW1pbHk9IlRpbWVzLHNlcmlmIiBmb250LXNpemU9IjE0LjAwIj4zMDwvdGV4dD4KPC9nPgo8L2c+Cjwvc3ZnPgo=" class="dot" alt="Graph"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A 星&lt;/em&gt; 算法是一个启发性寻路算法，是最有效的直接搜索算法。其他的寻路算法还有广度优先、深度优先和 DijKstra 算法。
算法不断从开放区域选取代价最小的节点，通过该节点再生成该节点的子节点并放到开放区域中，直到找到目标节点。
算法的关键在 &lt;strong&gt;选取代价最小的节点&lt;/strong&gt; ，这个操作需要预估该节点到目标节点的代价。
&lt;a href="https://gist.github.com/whiler/259285dca698f7b59970c3d34584111c"&gt;A 星算法实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="data:image/svg+xml;charset=utf-8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+CjwhRE9DVFlQRSBzdmcgUFVCTElDICItLy9XM0MvL0RURCBTVkcgMS4xLy9FTiIKICJodHRwOi8vd3d3LnczLm9yZy9HcmFwaGljcy9TVkcvMS4xL0RURC9zdmcxMS5kdGQiPgo8IS0tIEdlbmVyYXRlZCBieSBncmFwaHZpeiB2ZXJzaW9uIDIuNDMuMCAoMCkKIC0tPgo8IS0tIFRpdGxlOiBCaW5hcnlIZWFwIFBhZ2VzOiAxIC0tPgo8c3ZnIHdpZHRoPSIyNDJwdCIgaGVpZ2h0PSIyODVwdCIKIHZpZXdCb3g9IjAuMDAgMC4wMCAyNDIuMDAgMjg1LjAwIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIj4KPGcgaWQ9ImdyYXBoMCIgY2xhc3M9ImdyYXBoIiB0cmFuc2Zvcm09InNjYWxlKDEgMSkgcm90YXRlKDApIHRyYW5zbGF0ZSg0IDI4MSkiPgo8dGl0bGU+QmluYXJ5SGVhcDwvdGl0bGU+CjwhLS0gNyAtLT4KPGcgaWQ9Im5vZGUxIiBjbGFzcz0ibm9kZSI+Cjx0aXRsZT43PC90aXRsZT4KPGVsbGlwc2UgZmlsbD0ibm9uZSIgc3Ryb2tlPSJibGFjayIgY3g9IjEzNSIgY3k9Ii0yMTAuNSIgcng9IjI3IiByeT0iMTgiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMTM1IiB5PSItMjA2LjMiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+NzwvdGV4dD4KPC9nPgo8IS0tIDE3IC0tPgo8ZyBpZD0ibm9kZTIiIGNsYXNzPSJub2RlIj4KPHRpdGxlPjE3PC90aXRsZT4KPGVsbGlwc2UgZmlsbD0ibm9uZSIgc3Ryb2tlPSJibGFjayIgY3g9Ijk5IiBjeT0iLTkwIiByeD0iMjciIHJ5PSIxOCIvPgo8dGV4dCB0ZXh0LWFuY2hvcj0ibWlkZGxlIiB4PSI5OSIgeT0iLTg1LjgiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+MTc8L3RleHQ+CjwvZz4KPCEtLSA3JiM0NTsmZ3Q7MTcgLS0+CjxnIGlkPSJlZGdlMSIgY2xhc3M9ImVkZ2UiPgo8dGl0bGU+NyYjNDU7Jmd0OzE3PC90aXRsZT4KPHBhdGggZmlsbD0ibm9uZSIgc3Ryb2tlPSJibGFjayIgZD0iTTEyOS45MiwtMTkyLjc3QzEyNCwtMTczLjMgMTE0LjE1LC0xNDAuODcgMTA3LjE2LC0xMTcuODYiLz4KPHBvbHlnb24gZmlsbD0iYmxhY2siIHN0cm9rZT0iYmxhY2siIHBvaW50cz0iMTEwLjQzLC0xMTYuNTggMTA0LjE3LC0xMDguMDMgMTAzLjczLC0xMTguNjEgMTEwLjQzLC0xMTYuNTgiLz4KPC9nPgo8IS0tIDEzIC0tPgo8ZyBpZD0ibm9kZTMiIGNsYXNzPSJub2RlIj4KPHRpdGxlPjEzPC90aXRsZT4KPGVsbGlwc2UgZmlsbD0ibm9uZSIgc3Ryb2tlPSJibGFjayIgY3g9IjE3MSIgY3k9Ii05MCIgcng9IjI3IiByeT0iMTgiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMTcxIiB5PSItODUuOCIgZm9udC1mYW1pbHk9IlRpbWVzLHNlcmlmIiBmb250LXNpemU9IjE0LjAwIj4xMzwvdGV4dD4KPC9nPgo8IS0tIDcmIzQ1OyZndDsxMyAtLT4KPGcgaWQ9ImVkZ2UyIiBjbGFzcz0iZWRnZSI+Cjx0aXRsZT43JiM0NTsmZ3Q7MTM8L3RpdGxlPgo8cGF0aCBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBkPSJNMTQwLjA4LC0xOTIuNzdDMTQ2LC0xNzMuMyAxNTUuODUsLTE0MC44NyAxNjIuODQsLTExNy44NiIvPgo8cG9seWdvbiBmaWxsPSJibGFjayIgc3Ryb2tlPSJibGFjayIgcG9pbnRzPSIxNjYuMjcsLTExOC42MSAxNjUuODMsLTEwOC4wMyAxNTkuNTcsLTExNi41OCAxNjYuMjcsLTExOC42MSIvPgo8L2c+CjwhLS0gMjMgLS0+CjxnIGlkPSJub2RlNCIgY2xhc3M9Im5vZGUiPgo8dGl0bGU+MjM8L3RpdGxlPgo8ZWxsaXBzZSBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBjeD0iMjciIGN5PSItMTgiIHJ4PSIyNyIgcnk9IjE4Ii8+Cjx0ZXh0IHRleHQtYW5jaG9yPSJtaWRkbGUiIHg9IjI3IiB5PSItMTMuOCIgZm9udC1mYW1pbHk9IlRpbWVzLHNlcmlmIiBmb250LXNpemU9IjE0LjAwIj4yMzwvdGV4dD4KPC9nPgo8IS0tIDE3JiM0NTsmZ3Q7MjMgLS0+CjxnIGlkPSJlZGdlMyIgY2xhc3M9ImVkZ2UiPgo8dGl0bGU+MTcmIzQ1OyZndDsyMzwvdGl0bGU+CjxwYXRoIGZpbGw9Im5vbmUiIHN0cm9rZT0iYmxhY2siIGQ9Ik04NC40MywtNzQuODNDNzQuMjUsLTY0Ljk0IDYwLjQ4LC01MS41NSA0OC45NywtNDAuMzYiLz4KPHBvbHlnb24gZmlsbD0iYmxhY2siIHN0cm9rZT0iYmxhY2siIHBvaW50cz0iNTEuNDEsLTM3Ljg1IDQxLjgsLTMzLjM4IDQ2LjUzLC00Mi44NyA1MS40MSwtMzcuODUiLz4KPC9nPgo8IS0tIDE5IC0tPgo8ZyBpZD0ibm9kZTUiIGNsYXNzPSJub2RlIj4KPHRpdGxlPjE5PC90aXRsZT4KPGVsbGlwc2UgZmlsbD0ibm9uZSIgc3Ryb2tlPSJibGFjayIgY3g9Ijk5IiBjeT0iLTE4IiByeD0iMjciIHJ5PSIxOCIvPgo8dGV4dCB0ZXh0LWFuY2hvcj0ibWlkZGxlIiB4PSI5OSIgeT0iLTEzLjgiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+MTk8L3RleHQ+CjwvZz4KPCEtLSAxNyYjNDU7Jmd0OzE5IC0tPgo8ZyBpZD0iZWRnZTQiIGNsYXNzPSJlZGdlIj4KPHRpdGxlPjE3JiM0NTsmZ3Q7MTk8L3RpdGxlPgo8cGF0aCBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBkPSJNOTksLTcxLjdDOTksLTYzLjk4IDk5LC01NC43MSA5OSwtNDYuMTEiLz4KPHBvbHlnb24gZmlsbD0iYmxhY2siIHN0cm9rZT0iYmxhY2siIHBvaW50cz0iMTAyLjUsLTQ2LjEgOTksLTM2LjEgOTUuNSwtNDYuMSAxMDIuNSwtNDYuMSIvPgo8L2c+CjwhLS0gMjkgLS0+CjxnIGlkPSJub2RlNiIgY2xhc3M9Im5vZGUiPgo8dGl0bGU+Mjk8L3RpdGxlPgo8ZWxsaXBzZSBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBjeD0iMTcxIiBjeT0iLTE4IiByeD0iMjciIHJ5PSIxOCIvPgo8dGV4dCB0ZXh0LWFuY2hvcj0ibWlkZGxlIiB4PSIxNzEiIHk9Ii0xMy44IiBmb250LWZhbWlseT0iVGltZXMsc2VyaWYiIGZvbnQtc2l6ZT0iMTQuMDAiPjI5PC90ZXh0Pgo8L2c+CjwhLS0gMTMmIzQ1OyZndDsyOSAtLT4KPGcgaWQ9ImVkZ2U1IiBjbGFzcz0iZWRnZSI+Cjx0aXRsZT4xMyYjNDU7Jmd0OzI5PC90aXRsZT4KPHBhdGggZmlsbD0ibm9uZSIgc3Ryb2tlPSJibGFjayIgZD0iTTE3MSwtNzEuN0MxNzEsLTYzLjk4IDE3MSwtNTQuNzEgMTcxLC00Ni4xMSIvPgo8cG9seWdvbiBmaWxsPSJibGFjayIgc3Ryb2tlPSJibGFjayIgcG9pbnRzPSIxNzQuNSwtNDYuMSAxNzEsLTM2LjEgMTY3LjUsLTQ2LjEgMTc0LjUsLTQ2LjEiLz4KPC9nPgo8IS0tIExpc3QgLS0+CjxnIGlkPSJub2RlNyIgY2xhc3M9Im5vZGUiPgo8dGl0bGU+TGlzdDwvdGl0bGU+Cjxwb2x5Z29uIGZpbGw9Im5vbmUiIHN0cm9rZT0iYmxhY2siIHBvaW50cz0iMTgwLC0xNDQuNSAxODAsLTI3Ni41IDIzNCwtMjc2LjUgMjM0LC0xNDQuNSAxODAsLTE0NC41Ii8+Cjx0ZXh0IHRleHQtYW5jaG9yPSJtaWRkbGUiIHg9IjIwNyIgeT0iLTI2MS4zIiBmb250LWZhbWlseT0iVGltZXMsc2VyaWYiIGZvbnQtc2l6ZT0iMTQuMDAiPjc8L3RleHQ+Cjxwb2x5bGluZSBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBwb2ludHM9IjE4MCwtMjU0LjUgMjM0LC0yNTQuNSAiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMjA3IiB5PSItMjM5LjMiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+MTc8L3RleHQ+Cjxwb2x5bGluZSBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBwb2ludHM9IjE4MCwtMjMyLjUgMjM0LC0yMzIuNSAiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMjA3IiB5PSItMjE3LjMiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+MTM8L3RleHQ+Cjxwb2x5bGluZSBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBwb2ludHM9IjE4MCwtMjEwLjUgMjM0LC0yMTAuNSAiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMjA3IiB5PSItMTk1LjMiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+MjM8L3RleHQ+Cjxwb2x5bGluZSBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBwb2ludHM9IjE4MCwtMTg4LjUgMjM0LC0xODguNSAiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMjA3IiB5PSItMTczLjMiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+MTk8L3RleHQ+Cjxwb2x5bGluZSBmaWxsPSJub25lIiBzdHJva2U9ImJsYWNrIiBwb2ludHM9IjE4MCwtMTY2LjUgMjM0LC0xNjYuNSAiLz4KPHRleHQgdGV4dC1hbmNob3I9Im1pZGRsZSIgeD0iMjA3IiB5PSItMTUxLjMiIGZvbnQtZmFtaWx5PSJUaW1lcyxzZXJpZiIgZm9udC1zaXplPSIxNC4wMCI+Mjk8L3RleHQ+CjwvZz4KPC9nPgo8L3N2Zz4K" class="dot" alt="Graph"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A 星&lt;/em&gt; 算法每次都需要选取代价最小的节点，这样的操作十分适合用 &lt;em&gt;二叉堆&lt;/em&gt; 来实现。
&lt;em&gt;二叉堆&lt;/em&gt; 是一种队列，不同于常见的先进先出、先进后出队列，它随意进队，最小的出队。进队出队的时间复杂队都是 &lt;span class="arithmatex"&gt;\(O(log(n))\)&lt;/span&gt; 。
它用线性的数组／列表抽象地构造出一个完全二叉树，树上每一个节点小于它的子节点。
&lt;a href="https://gist.github.com/whiler/67668f14c0466eca081a203d5655f779"&gt;二叉堆实现&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;变更历史&lt;/h3&gt;
&lt;h4&gt;2018-05-05&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增加评分功能&lt;/li&gt;
&lt;li&gt;根据浏览器自动适配中文版和英文版&lt;/li&gt;
&lt;li&gt;美化样式&lt;/li&gt;
&lt;li&gt;难度调整&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2018-04-24&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;完善用户体验&lt;ul&gt;
&lt;li&gt;新增「开始」交互界面&lt;/li&gt;
&lt;li&gt;新增 「游戏中」交互界面&lt;/li&gt;
&lt;li&gt;新增 「游戏结束」交互界面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;新增 &lt;strong&gt;「自动还原」&lt;/strong&gt; 功能&lt;/li&gt;
&lt;li&gt;可以随意选取开始位置&lt;/li&gt;
&lt;li&gt;新增「猫」「狗」背景图，随机选择概率分别是 50% 和 30%&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;2018-04-14&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;增加还原判定&lt;/li&gt;
&lt;li&gt;适配竖屏&lt;/li&gt;
&lt;li&gt;参数支持&lt;ul&gt;
&lt;li&gt;网格设置&lt;/li&gt;
&lt;li&gt;难度设置&lt;/li&gt;
&lt;li&gt;背景图更换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>用虚拟私用网络访问敏感网络</title><link href="https://whiler.github.io/bypass-via-vpn.html" rel="alternate"></link><published>2016-10-18T00:00:00+08:00</published><updated>2016-10-18T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2016-10-18:/bypass-via-vpn.html</id><summary type="html">&lt;p&gt;利用 域名列表 、dnsmasq 、 iptables 和 ipset 配合 虚拟私用网络 精确到域名解决网络封锁。&lt;/p&gt;</summary><content type="html">&lt;p&gt;相对于 &lt;a href="https://whiler.github.io/bypass.md"&gt;绕开网络封锁访问敏感域名&lt;/a&gt; ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖 虚拟私用网络 ；&lt;/li&gt;
&lt;li&gt;不再依赖 pdnsd ；&lt;/li&gt;
&lt;li&gt;通过协议不再仅限于 TCP 和 UDP ；&lt;/li&gt;
&lt;li&gt;客户端本机也可以访问敏感网络。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用 域名列表 配合 dnsmasq 和 ipset 收集需要通过 虚拟私用网络 的流量，利用 iptables 和 ipset 识别并标记流量，配置 路由表 让被标记的流量通过 虚拟私用网络 访问。&lt;/p&gt;
&lt;p&gt;大致的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装并配置 虚拟私用网络 服务端；&lt;/li&gt;
&lt;li&gt;安装 虚拟私用网络 客户端；&lt;/li&gt;
&lt;li&gt;创建 ipset ；&lt;/li&gt;
&lt;li&gt;将可信的 DNS 服务器地址添加到 ipset ；&lt;/li&gt;
&lt;li&gt;安装并配置 dnsmasq ；&lt;/li&gt;
&lt;li&gt;创建路由表；&lt;/li&gt;
&lt;li&gt;调整内核 rp filter ；&lt;/li&gt;
&lt;li&gt;自定义 vpnc script 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;安装并配置 虚拟私用网络 服务端&lt;/h3&gt;
&lt;p&gt;感激 schemacs 赠送的 AnyConnect 虚拟私用网络，让我免去了安装和配置的繁琐。&lt;/p&gt;
&lt;h3&gt;安装 虚拟私用网络 客户端&lt;/h3&gt;
&lt;p&gt;连接 AnyConnect 可以用 OpenConnect 的客户端。&lt;/p&gt;
&lt;h3&gt;创建 ipset&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ipset create "${SETNAME}" hash:ip&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;将可信的 DNS 服务器地址添加到 ipset&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ipset add "${SETNAME}" 8.8.8.8
ipset add "${SETNAME}" 8.8.4.4&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;安装并配置 dnsmasq&lt;/h3&gt;
&lt;p&gt;修改 /etc/dnsmasq.conf 在最后加入 conf-dir=/etc/dnsmasq.d/,*.conf ，新建并进入 /etc/dnsmasq.d 目录；
创建一个后缀为 .conf 的配置文件，为每一个敏感的域名指定可信的 DNS 解析服务器，并将解析得到的地址添加到 ipset 中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo "conf-dir=/etc/dnsmasq.d/,*.conf" &amp;gt;&amp;gt; /etc/dnsmasq.conf

mkdir -p /etc/dnsmasq.d

echo "server=/google.com/8.8.8.8"   &amp;gt;&amp;gt; "/etc/dnsmasq.d/${static}.conf"
echo "ipset=/google.com/${SETNAME}" &amp;gt;&amp;gt; "/etc/dnsmasq.d/${static}.conf"&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;创建路由表&lt;/h3&gt;
&lt;p&gt;/etc/iproute2/rt_tables 保存了系统的路由表。
向文件中写入一行即可创建一个路由表。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo -e "${TABLEID}\t${TABLENAME}" &amp;gt;&amp;gt; /etc/iproute2/rt_tables&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;调整内核 rp filter&lt;/h3&gt;
&lt;p&gt;由于用到部分 策略路由 ，需要将内核反向过滤策略关闭或者放宽松。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo "net.ipv4.conf.default.rp_filter=2" &amp;gt;&amp;gt; /etc/sysctl.conf
echo "net.ipv4.conf.all.rp_filter=2"     &amp;gt;&amp;gt; /etc/sysctl.conf
sysctl -p&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;自定义 vpnc script&lt;/h3&gt;
&lt;p&gt;若使用 OpenConnect 默认的 &lt;a href="http://git.infradead.org/users/dwmw2/vpnc-scripts.git/blob_plain/HEAD:/vpnc-script"&gt;vpnc script&lt;/a&gt; ，它会替换系统默认路由，让所有流量都通过 虚拟私用网络 ，显然这样不合理。&lt;/p&gt;
&lt;p&gt;默认的 vpnc script 主要实现了两个函数 do_connect 和 do_disconnect 。&lt;/p&gt;
&lt;p&gt;do_connect 在开始连接 虚拟私用网络 时，依次调用 set_vpngateway_route 、 do_ifconfig 和 set_default_route 三个函数，其中 set_default_route 将系统默认的路由替换成了 虚拟私用网络 分配的路由。&lt;/p&gt;
&lt;p&gt;do_disconnect 在退出 虚拟私用网络 时，依次调用 reset_default_route 、 del_vpngateway_route 和 destroy_tun_device ，其中 reset_default_route 函数恢复系统原来的路由。&lt;/p&gt;
&lt;p&gt;我们需要实现 start_split_tunneling 和 stop_split_tunneling 来替换 set_vpngateway_route 和 reset_default_route 完成分流。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;start_split_tunneling() {
    # mark
    # 目的地址匹配 ipset 则打上标记
    iptables --table mangle --insert PREROUTING --match set --match-set "${SETNAME}" dst --jump MARK --set-mark "${MARK}"
    iptables --table mangle --insert OUTPUT     --match set --match-set "${SETNAME}" dst --jump MARK --set-mark "${MARK}"

    # forwarding
    # 允许流量进出 TUNDEV
    iptables --table filter --insert FORWARD --out-interface "${TUNDEV}" --jump ACCEPT
    iptables --table filter --insert FORWARD --in-interface  "${TUNDEV}" --jump ACCEPT

    # nat
    # 地址伪装
    iptables --table nat --insert POSTROUTING --out-interface "${TUNDEV}" --jump MASQUERADE

    # rule
    # 所有带标记的流量都通过指定的路由表
    ip rule add fwmark ${MARK} table ${TABLENAME}

    # gateway
    # 为路由表指定默认的路由设备
    ip route add default dev "${TUNDEV}" src "${INTERNAL_IP4_ADDRESS}" table "${TABLENAME}"
}

stop_split_tunneling() {
    # gateway
    ip route del default dev "${TUNDEV}" src "${INTERNAL_IP4_ADDRESS}" table "${TABLENAME}"

    # rule
    ip rule del fwmark ${MARK} table ${TABLENAME}

    # nat
    iptables --table nat --delete POSTROUTING --out-interface "${TUNDEV}" --jump MASQUERADE

    # forwarding
    iptables --table filter --delete FORWARD --out-interface "${TUNDEV}" --jump ACCEPT
    iptables --table filter --delete FORWARD --in-interface  "${TUNDEV}" --jump ACCEPT

    # mark
    iptables --table mangle --delete PREROUTING --match set --match-set "${SETNAME}" dst --jump MARK --set-mark "${MARK}"
    iptables --table mangle --delete OUTPUT     --match set --match-set "${SETNAME}" dst --jump MARK --set-mark "${MARK}"
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考： &lt;a href="https://github.com/clowwindy/ShadowVPN/wiki/ShadowVPN----ipset"&gt;ShadowVPN ipset&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>绘制心形图案</title><link href="https://whiler.github.io/heart.html" rel="alternate"></link><published>2016-04-14T00:00:00+08:00</published><updated>2016-04-14T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2016-04-14:/heart.html</id><summary type="html">&lt;p&gt;半夜没事瞎折腾，想到绘制心形图案消磨时间。&lt;/p&gt;</summary><content type="html">&lt;p&gt;半夜没事瞎折腾，想到绘制心形图案消磨时间。
看了一些方案，最后采用半圆加正方形折叠的方式来绘制，&lt;code&gt;r = a * (1 - sin θ)&lt;/code&gt; 真心不会。&lt;/p&gt;
&lt;p&gt;绘制心形图案，首先想到了笛卡尔的 &lt;code&gt;r = a * (1 - sin θ)&lt;/code&gt; ，但是折腾了半天不会将极坐标系的点转换到笛卡尔坐标系，于是改用正方形外接一个半圆再折叠一次来表示。
这样就只剩下简单的几何代数运算了。&lt;/p&gt;
&lt;p&gt;代码：
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

from math import sin, sqrt, pi


def heart(radius):
    side = radius * sin(pi / 4.0)
    offset = radius + side
    steps = radius + 3.0 * side
    top = 0
    while top &amp;lt;= steps:
        if top &amp;lt; offset:
            delta = sqrt(top * (2.0 * radius - top))
            left_min = side - delta
            if left_min &amp;lt; 0:
                left_min = 0.0
            left_max = side + delta
        else:
            left_max = steps - top
            left_min = 0.0

        line = ''
        i = 0
        while i &amp;lt; offset + left_max:
            if offset - left_max &amp;lt;= i &amp;lt;= offset - left_min:
                line = line + '*'
            elif offset + left_min &amp;lt;= i &amp;lt;= offset + left_max:
                line = line + '*'
            else:
                line = line + ' '
            i = i + 1

        print(line)

        top = top + 1&lt;/code&gt;&lt;/pre&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>绕开网络封锁访问敏感域名</title><link href="https://whiler.github.io/bypass.html" rel="alternate"></link><published>2016-04-11T00:00:00+08:00</published><updated>2016-04-11T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2016-04-11:/bypass.html</id><summary type="html">&lt;p&gt;用域名列表、dnsmasq 、 pdnsd 、 iptables 和 ipset 配合 shadowsocks-libev 精确到域名解决 tcp 连接封锁、dns 劫持、dns 请求 udp 丢包的问题，绕过网络封锁。&lt;/p&gt;</summary><content type="html">&lt;p&gt;用域名列表、dnsmasq 、 pdnsd 、 iptables 和 ipset 配合 shadowsocks-libev 精确到域名解决 TCP 连接封锁、DNS 劫持、DNS 请求 UDP 丢包的问题，绕过网络封锁。&lt;/p&gt;
&lt;p&gt;首先，用 shadowsocks-libev 建立透明代理，绕开网络封锁；
配置 iptables ，配合 ipset 让匹配 ipset 的 TCP 数据都转发到透明代理；
利用 pdnsd 通过 TCP 向可信的 DNS 服务器转发请求；
用 dnsmasq 配置敏感的域名用 pdnsd 解析，并将解析结果写入 ipset 。&lt;/p&gt;
&lt;p&gt;大致的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装并配置 shadowsocks-libev ；&lt;/li&gt;
&lt;li&gt;创建 ipset ；&lt;/li&gt;
&lt;li&gt;创建 iptables 规则；&lt;/li&gt;
&lt;li&gt;安装并配置 pdnsd ；&lt;/li&gt;
&lt;li&gt;将可信的 DNS 服务器地址添加到 ipset ；&lt;/li&gt;
&lt;li&gt;安装并配置 dnsmasq 。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;安装并配置 shadowsocks-libev&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/shadowsocks/shadowsocks-libev"&gt;shadowsocks/shadowsocks-libev&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;创建 ipset&lt;/h3&gt;
&lt;p&gt;创建一个名为 bypass 的 ipset 。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipset create bypass hash:ip&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;创建 iptables 规则&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在 nat 表中新建一个名为 BYPASS 的链；&lt;/li&gt;
&lt;li&gt;让访问 shadowsocks 服务器的连接采用默认的规则；&lt;/li&gt;
&lt;li&gt;访问私有网络的连接采用默认的规则；&lt;/li&gt;
&lt;li&gt;所有目标地址匹配 ipset 的 TCP 连接都重定向到 1080 端口（本地开启的 shadowsocks 透明代理端口）；&lt;/li&gt;
&lt;li&gt;将 BYPASS 链添加到 PREROUTING 链；&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;iptables --table nat --new BYPASS

iptables --table nat --append BYPASS --destination X.X.X.X --jump RETURN

iptables --table nat --append BYPASS --destination 0.0.0.0/8 --jump RETURN
iptables --table nat --append BYPASS --destination 10.0.0.0/8 --jump RETURN
iptables --table nat --append BYPASS --destination 100.64.0.0/10 --jump RETURN
iptables --table nat --append BYPASS --destination 127.0.0.0/8 --jump RETURN
iptables --table nat --append BYPASS --destination 169.254.0.0/16 --jump RETURN
iptables --table nat --append BYPASS --destination 172.16.0.0/12 --jump RETURN
iptables --table nat --append BYPASS --destination 192.0.0.0/24 --jump RETURN
iptables --table nat --append BYPASS --destination 192.0.2.0/24 --jump RETURN
iptables --table nat --append BYPASS --destination 192.88.99.0/24 --jump RETURN
iptables --table nat --append BYPASS --destination 192.168.0.0/16 --jump RETURN
iptables --table nat --append BYPASS --destination 198.18.0.0/15 --jump RETURN
iptables --table nat --append BYPASS --destination 198.51.100.0/24 --jump RETURN
iptables --table nat --append BYPASS --destination 203.0.113.0/24 --jump RETURN
iptables --table nat --append BYPASS --destination 224.0.0.0/4 --jump RETURN
iptables --table nat --append BYPASS --destination 240.0.0.0/4 --jump RETURN
iptables --table nat --append BYPASS --destination 255.255.255.255/32 --jump RETURN

iptables --table nat --append BYPASS --protocol tcp --match set --match-set bypass dst --jump REDIRECT --to-ports 1080

iptables --table nat --append PREROUTING --protocol tcp --jump BYPASS&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;安装并配置 pdnsd&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;修改 global 中的 query_method 为 tcp_only ，让 pdnsd 只通过 TCP 向上游 DNS 服务器转发请求；&lt;/li&gt;
&lt;li&gt;修改 global 中的 server_port 为其他非 53 端口，如5353（53 端口为 dnsmasq 留着）；&lt;/li&gt;
&lt;li&gt;添加一个可信的支持 TCP 查询的 DNS 上游服务器，如 Google 公共 DNS 服务器。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;global {
    perm_cache = 2048;
    cache_dir = "/var/cache/pdnsd";
    run_as = "nobody";
    server_ip = 127.0.0.1;
    server_port = 5353;
    status_ctl = on;
    paranoid = on;
    query_method = tcp_only;
    min_ttl = 15m;
    max_ttl = 1w;
    timeout = 10;
}

server {
    label = "google";
    ip = 8.8.8.8, 8.8.4.4;
    root_server = on;
    uptest = none;
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;将可信的 DNS 服务器地址添加到 ipset&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;ipset add bypass 8.8.8.8
ipset add bypass 8.8.4.4&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;安装并配置 dnsmasq&lt;/h3&gt;
&lt;p&gt;修改 /etc/dnsmasq.conf 在最后加入 conf-dir=/etc/dnsmasq.d/,*.conf ，新建并进入 /etc/dnsmasq.d 目录；
创建一个名为 bypass.conf  文件，为每一个敏感的域名指定可信的 DNS 解析服务器，并将解析得到的地址添加到 ipset 中。内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server=/thinkwithgoogle.com/127.0.0.1#5353
ipset=/thinkwithgoogle.com/bypass
server=/withgoogle.com/127.0.0.1#5353
ipset=/withgoogle.com/bypass
server=/google.com/127.0.0.1#5353
ipset=/google.com/bypass&lt;/code&gt;&lt;/pre&gt;</content><category term="misc"></category></entry><entry><title>关于这个博客</title><link href="https://whiler.github.io/blog.html" rel="alternate"></link><published>2016-03-04T00:00:00+08:00</published><updated>2018-05-04T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2016-03-04:/blog.html</id><summary type="html">&lt;p&gt;闷头写代码到深夜，灵感闪现，迅速解决困扰了很久的问题，想要欢呼一下，发现已经是深夜了，作罢。&lt;/p&gt;</summary><content type="html">&lt;p&gt;闷头写代码到深夜，灵感闪现，迅速解决困扰了很久的问题，想要欢呼一下，发现已经是深夜了，作罢。
还是用一个博客记下来吧，聊以告慰自己。&lt;/p&gt;
&lt;p&gt;使用的平台和库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daringfireball.net/projects/markdown/"&gt;MarkDown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://analytics.google.com/"&gt;Google Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="https://github.com/gitpython-developers/GitPython"&gt;GitPython&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="http://lxml.de/"&gt;lxml&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="https://github.com/trentm/python-markdown2"&gt;markdown2&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="https://github.com/buriy/python-readability"&gt;readability-lxml&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="http://requirejs.org/"&gt;RequireJS&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="https://github.com/sindresorhus/github-markdown-css"&gt;github-markdown-css&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://highlightjs.org/"&gt;highlight.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="https://github.com/chjj/marked"&gt;marked&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="https://github.com/janl/mustache.js"&gt;mustache.js&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ionicons.com/"&gt;Ionicons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="https://pythonhosted.org/Markdown/"&gt;Python-Markdown&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jinja.pocoo.org/"&gt;Jinja2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="https://github.com/aleray/mdx_del_ins"&gt;del_ins&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.crummy.com/software/BeautifulSoup/"&gt;Beautiful Soup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/zacharyvoase/cssmin"&gt;cssmin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mankyd/htmlmin"&gt;htmlmin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gisce/markdown-blockdiag"&gt;Markdown blockdiag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/facelessuser/pymdown-extensions"&gt;PyMdown Extensions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rspivak/slimit"&gt;SlimIt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/miracle2k/webassets"&gt;webassets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Python-Markdown/markdown"&gt;Python-Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mathjax.org/"&gt;MathJax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mhchem/MathJax-mhchem"&gt;MathJax/mhchem Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/adrai/flowchart.js"&gt;flowchart.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bramp/js-sequence-diagrams"&gt;JS Sequence Diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.graphviz.org/"&gt;Graphviz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>关于/about</title><link href="https://whiler.github.io/about.html" rel="alternate"></link><published>2016-02-28T00:00:00+08:00</published><updated>2018-05-04T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2016-02-28:/about.html</id><summary type="html">&lt;p&gt;一只嘴巴，两个鼻孔，四只眼睛，六块腹肌，拥有22对全球唯一的常染色体以及1对xy性染色体。&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="me" src="https://whiler.github.io/assets/images/500.png"&gt;&lt;/p&gt;
&lt;p&gt;一只嘴巴，两个鼻孔，四只眼睛，六块腹肌，拥有 22 对全球唯一的常染色体以及 1 对 &lt;em&gt;XY&lt;/em&gt; 性染色体。
喜欢吃饭、睡觉、吹风、乘凉、游泳、跑步、滑雪、羽毛球以及素描。
典型的程序员，无节操、无下限、闷骚。
想要把代码写成一首诗，但目前只能写成一坨翔，很是苦恼。 &lt;/p&gt;
&lt;p&gt;One guy from the earth, with one mouth, two legs, four eyes and six pack abs, it's me, a software engineer, likes eating, sleeping, walking, swimming, running, playing badminton and snowboarding.&lt;/p&gt;
&lt;h3&gt;find me&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.zhihu.com/people/whiler" title="whiler @ Zhihu"&gt;知乎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;a href="https://www.facebook.com/wenwu.lv.5" title="Wenwu Lv @ Facebook"&gt;Facebook&lt;/a&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="mailto:wenwu500@qq.com" title="mail to me"&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/whiler" title="whiler @ GitHub"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>my gpg public key</title><link href="https://whiler.github.io/gpg.html" rel="alternate"></link><published>2015-08-29T00:00:00+08:00</published><updated>2015-08-29T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2015-08-29:/gpg.html</id><summary type="html">&lt;p&gt;my gpg public key information.&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Key ID&lt;/h3&gt;
&lt;p&gt;34DB676C&lt;/p&gt;
&lt;h3&gt;Fingerprint&lt;/h3&gt;
&lt;p&gt;AE12 BE0C B075 2C35 CDEB  C120 4BA5 A9C5 34DB 676C&lt;/p&gt;
&lt;h3&gt;Public Key in ASCII&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;-----BEGIN PGP PUBLIC KEY BLOCK-----
Comment: GPGTools - https://gpgtools.org

mQSuBFSqF6wRDACcPLi1uL/TPFimjUrYcMCJMSot4hpE9RQ2aa0mNfCRVqHaUqYK
n0GG7ZNUoU99kPt8Ubv27qODerrlkWcC8DjESXryHiq42pKsKNe78FHMJ++Q01Ss
13vjmSslYgBY9tCPm3ERvZwrFFEb4zOXJcGalO3dWSZZvT/WDDf5UWSwc+P2ERC+
if66sYteDHqj9lbFZeZ3i4NsXeUaamgmWgFUiwLYPeasCxyA6cN7fLT5RxyDfLev
9Z3KKVFPoPOj740KhE28X/UuAfPH1TCRxNCf3ZMQ/gmr8WQWBLyyFGCIWktBpVD6
QCuWJOfp0KHU/2abQhSMVJljSINJV8ugx77PCWSE+1k66+iYofAa8vDeSIgkCAxQ
oIx/B7aA7+qTbKDOwu23JnmqRkj0xo+qOoqlsjRRDcfT7XPaB01bD0d815MI9Izg
6qkG/YcjKowW4QSOdRVowv1sOFyT5/gyoV9g2tY5i0Afn29lceva676e64VAxGBq
l9jqTuozNaoJIQsBAPgjsjyQtIEolyMo2YS9TtuLbwoVqQNFw7hhOv+eS691C/kB
x9taARe3GHiMmsLeT/di8SMtnA7l1fmN3SSgW65DH/8mmdWyEkBvGqd4sojmizGq
xQWjcmsA3zh/nPegBCpBGTLhdNh4bDw93kk3bkqdSpEBu0lxeQ6m7Avh9YbW5z4u
RH7ZGPw18WqLC/O54K5azwELhQWO+HJPHBqGPcRSWVAi5YTLOrNEw/GMutRdsbGi
mniUVvDAm81i8Dc3Ks+MBffvawns2yaxpVw5uBmJbBb2g+mjtviaXJxPudoMbG9N
LGZClBx4fSQ6Fm9JhtiUB2GyYzEYw60JQKCJHQ793T8gU0Ha0Z+IlYWCK0kiI1nl
Ug5KXmmCGNu9Rw8ktx2pQN3iN9aYPX3osaKpgDV00iJDt/RSij3t63yCVeJ6ejxW
T9sc89v/xHG0LludVDmG7Uc4skrCzt0/wuV9A/NV5ymiqoOS6tYI9ykdyIkgq7Ai
sHu5Y5LZ0DHp80UawmFbrjMm4CL2zx3+WG/RJbpTVYBUCOnyb19x5QqO47YfEZgL
/0Yc6OrSHsdHnvEDL978m7nUJZFwJQmCtEpTURpa9HVpxDHKI+Spc6FJBGQSKyHi
/mRWqQjEPrZhCMex45THawxykvbyJudR9h252bvUbdG8jt/ZvP2QC4GuQsZSoZ1i
gDiD8T1WqMvRqwTKOAywBjUbcqikQuo+Oj0oSpbyXutIScjClu13/cq20RjuUtk0
wUXZ16+zP3Yayoq8XR/qpjM1KYuOIdnBEq3nE9DotVqR6Ldik1MfZHXkY4l3C/6x
BkgDw3hQlOWHggIkezVoDL6CKJlqYOfwm6CSPtN0Obh6+76e6tikux8Jxj2juFbX
90kZ5OYUrLT2+bBZqedy7VNYRk7FiPqwKzUyJ4Np3IRHoXgv0NnbaW5VAN0CXtKR
I9bNMD2ARJUl8sVeOGHgthwjuK2JfD5v1McWNT10Qk/WbS2gMQr45Bt2Tb0cnnv+
QTliDox9Q+Dw55BmBUNRLwqVj56cuaHZjP1rn2EqQlrqUHcAesXY0y9hoe3sXUoO
a7Q2d2hpbGVyIChwcmVzb25hbCBwcml2YWN5IGZvciB3aGlsZXIpIDx3ZW53dTUw
MEBxcS5jb20+iHkEExEKACEFAlSqF6wCGwMFCwkIBwMFFQoJCAsFFgIDAQACHgEC
F4AACgkQS6WpxTTbZ2zZBAEAlm1P1kyIONcoyBJX8D/XdlQ5cDfntDNP685MZoOf
rzEA/iNcCWqSlxUq/QJ6fT/TzMY8BhnH4GWPfJFdbaRp4G5Z0f8AACyu/wAALKkB
EAABAQAAAAAAAAAAAAAAAP/Y/+AAEEpGSUYAAQEBAEgASAAA/9sAQwAFAwQEBAMF
BAQEBQUFBgcMCAcHBwcPCwsJDBEPEhIRDxERExYcFxMUGhURERghGBodHR8fHxMX
IiQiHiQcHh8e/9sAQwEFBQUHBgcOCAgOHhQRFB4eHh4eHh4eHh4eHh4eHh4eHh4e
Hh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4e/8AAEQgAtAC0AwERAAIRAQMR
Af/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMF
BQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYX
GBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6
g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV
1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAAB
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
o1Ahjb4wIXRu
=XeA7
-----END PGP PUBLIC KEY BLOCK-----&lt;/code&gt;&lt;/pre&gt;</content><category term="misc"></category></entry><entry><title>六度分割理论</title><link href="https://whiler.github.io/theory-of-six-degrees-contacts.html" rel="alternate"></link><published>2014-09-17T00:00:00+08:00</published><updated>2014-09-17T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2014-09-17:/theory-of-six-degrees-contacts.html</id><summary type="html">&lt;p&gt;一次求职笔试，考到了六度分隔理论，判断两个人之间是否存在可能的联系。&lt;/p&gt;</summary><content type="html">&lt;p&gt;一次求职笔试，考到了六度分隔理论，判断两个人之间是否存在可能的联系。
问题是比较简单的，就是检查权重为1的无向图中两个节点在 6 层内是否有相通的路径。&lt;/p&gt;
&lt;h3&gt;解决办法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;收集每一个人的一度好友&lt;/li&gt;
&lt;li&gt;从一个人开始，遍历他的所有好友，检查是否是另一个人的好友&lt;/li&gt;
&lt;li&gt;递归检查好友的好友，同时排除上一个好友&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;实现&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-
#

import collections
import itertools
import logging
import random
import string

logging.basicConfig(level=logging.NOTSET,
                    format='[%(levelname)s]\t%(asctime)s\t%(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S %Z')

DEPTH = 6


def create_edges(count):
    edges = set()
    for _ in range(count):
        a = random.choice(string.ascii_uppercase)
        b = random.choice(string.ascii_uppercase)
        while a == b or (a, b) in edges or (b, a) in edges:
            a = random.choice(string.ascii_uppercase)
            b = random.choice(string.ascii_uppercase)
        edges.add((a, b))
    return edges


def build_trees(edges):
    trees = collections.defaultdict(set)
    for a, b in edges:
        trees[a].add(b)
    return trees


def find(trees, a, b):
    if not (a in trees and b in trees):
        return -1
    elif a == b:
        return 0
    return walk(trees, a, b, 1) or -1


def walk(trees, a, b, depth, block=None):
    if depth &amp;gt; DEPTH:
        return -1
    children = trees[a]
    if b in children:
        return depth
    else:
        for child in children:
            if child == block:
                continue
            dep = walk(trees, child, b, depth + 1, a)
            if dep is not None:
                return dep


if __name__ == '__main__':
    edges = create_edges(128)
    trees = build_trees(edges)
    for a, b in itertools.combinations(string.ascii_uppercase, 2):
        dep = find(trees, a, b)
        logging.debug('degrees between %s and %s is %d', a, b, dep)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于六度分隔理论的详细介绍，可以参考 &lt;a href="https://en.wikipedia.org/wiki/Six_degrees_of_separation"&gt;Six degrees of separation&lt;/a&gt; 。&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>多数据源混合输出</title><link href="https://whiler.github.io/mix-sources.html" rel="alternate"></link><published>2012-07-15T00:00:00+08:00</published><updated>2012-07-15T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2012-07-15:/mix-sources.html</id><summary type="html">&lt;p&gt;拥有相同数据格式的数据源按照数量混合分页输出。&lt;/p&gt;</summary><content type="html">&lt;p&gt;拥有相同数据格式的数据源按照数量混合分页输出。
比如在新闻列表中混合输出政治、经济、娱乐、科技新闻；
在用户 Feed 流中混合输出用户订阅的条目和推荐给用户的条目。&lt;/p&gt;
&lt;p&gt;数据源输出有 &lt;strong&gt;开始正常输出&lt;/strong&gt;、&lt;strong&gt;开始变换输出（填补前一个数据源不足分页的量）&lt;/strong&gt;、&lt;strong&gt;变换输出&lt;/strong&gt; 和 &lt;strong&gt;结束输出&lt;/strong&gt; 四个阶段。
每一个数据源开始时，按照指定的数量输出，到最后一个分页不足时，由下一个数据源填补不足的量。
将前面所有的数据源视为一个数据源，简化计算。&lt;/p&gt;
&lt;h3&gt;实现&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding: utf-8 -*-
#


def source(tag, count):
    return ['%s%02d' % (tag, i) for i in range(count)]


def mix(page, *args):
    sources = [
        (source, len(source) / size, size)
        for source, size in args
    ]
    sources.sort(key=lambda (source, total, size): total)

    total = 0
    size = 0
    delta = list()
    for source, _, need in sources:
        count = len(source)

        if total == size == 0:
            sep = count / need
            if page &amp;lt; sep:
                start = page * need
                delta.extend(source[start: start + need])
            elif page == sep:
                start = page * need
                delta.extend(source[start: start + count % need])
        else:
            sep = total / size
            if page &amp;lt; sep:
                start = page * need
                delta.extend(source[start: start + need])
            elif page == sep:
                start = page * need
                delta.extend(source[start: start + need + size - total % size])
            else:
                if page &amp;lt; (total + count) / (size + need):
                    start = page * (size + need) - total
                    delta.extend(source[start: start + need + size])
                else:
                    start = page * (size + need) - total
                    delta.extend(source[start: start + (total + count) % (size + need)])

        total += count
        size += need
    return delta


if __name__ == '__main__':
    a = source('A', 3)
    b = source('B', 10)
    c = source('C', 45)
    page = 0
    items = mix(page, (a, 2), (b, 3), (c, 5))
    while items:
        print('Page: %d\t%s' % (page, ' '.join(items)))
        page += 1
        items = mix(page, (a, 2), (b, 3), (c, 5))&lt;/code&gt;&lt;/pre&gt;</content><category term="misc"></category></entry><entry><title>手机QQ2009聊天记录分析及提取</title><link href="https://whiler.github.io/QQ2009.sis.html" rel="alternate"></link><published>2009-10-14T00:00:00+08:00</published><updated>2009-10-14T00:00:00+08:00</updated><author><name></name></author><id>tag:whiler.github.io,2009-10-14:/QQ2009.sis.html</id><summary type="html">&lt;p&gt;symbian series 60 3rd qq mobile chat log parse and extract.&lt;/p&gt;</summary><content type="html">&lt;p&gt;这是我的最早一个像程序的程序。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;十月十三号用上手机QQ2009了，一看，果然更花哨了。但以前写的手机QQ聊天记录提取程序用不上了，莫办法，重新分析。&lt;/p&gt;
&lt;p&gt;一手机QQ2009聊天记录文件的存放位置&lt;/p&gt;
&lt;p&gt;C:/System/data/Tencent/QQ/自己的QQ号码/好友的QQ号码/msg.info&lt;/p&gt;
&lt;p&gt;假如手机QQ装在E盘的把，上面盘符改成E就是了。&lt;/p&gt;
&lt;p&gt;二手机QQ2009聊天记录文件的字符编码&lt;/p&gt;
&lt;p&gt;手机QQ2009聊天记录文件的字符编码还是和手机QQ2008聊天记录文件的字符编码一样的，用的是UTF-16&lt;/p&gt;
&lt;p&gt;三手机QQ2009聊天记录文件结构分析&lt;/p&gt;
&lt;p&gt;和手机QQ2008聊天记录文件不一样了！&lt;/p&gt;
&lt;p&gt;注：我用的是十六进制分析&lt;/p&gt;
&lt;p&gt;消息分位发送消息和接收消息&lt;/p&gt;
&lt;p&gt;发送消息&lt;/p&gt;
&lt;p&gt;发送消息的十六进制表示以a8 ??(??表示一个十六进制数)标记开始并以它标记结束，接着用四个字节记录这条消息的序列，接着空出六个字节来，下一个字节是十六进制的80，说明消息是发送消息，从此以后位消息内容，直到，消息结束标记a8 ??。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;发送消息 “不”字的消息的十六进制&lt;/p&gt;
&lt;p&gt;a8 024a d5 0a d3 00 00 00 00 00 00800d 4ea8 02&lt;/p&gt;
&lt;p&gt;注： a8 02 中的 02 是随机的，但前后统一。&lt;/p&gt;
&lt;p&gt;接收消息&lt;/p&gt;
&lt;p&gt;发送消息的十六进制表示以a8 ??标记开始并以它标记结束，接着用四个字节记录这条消息的序列，接着空出六个字节来，下一个字节是十六进制的00，说明消息是发送消息，从此以后位消息内容，直到，消息结束标记a8 ??。&lt;/p&gt;
&lt;p&gt;接收消息 “不”字的消息的十六进制&lt;/p&gt;
&lt;p&gt;a8 064a d5 0a bf 00 00 00 00 00 00000d 4ea8 06&lt;/p&gt;
&lt;p&gt;注： a8 06 中的 06 是随机的，但前后统一。&lt;/p&gt;
&lt;p&gt;四 提取手机QQ2009的聊天记录&lt;/p&gt;
&lt;p&gt;经过分析，提取就简单了。&lt;/p&gt;
&lt;p&gt;需要提取手机QQ2009聊天记录的友友可以把你的msg.info文件发给俺：&lt;/p&gt;
&lt;p&gt;最后，这是为了师太写的，嘿嘿。&lt;/p&gt;
&lt;p&gt;分析有误的地方请指出，一起分享；代码写得差了，请多指教。&lt;/p&gt;
&lt;p&gt;补：上网一看，汗，要把手机QQ2008以前聊天记录的导入到手机QQ2009里面来还没人做，俺继续研究，应该不难，手机QQ2008的聊天记录俺有分析及提取的程序，嘿嘿。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面是提取手机QQ2009聊天记录的Python语言代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Encoding:UTF-8
# FileName:PickupMobileQQ2009Message
# Date:2009_10_14

# from DMQCR.convert import OtoA
# I write this module for convert the expression code to char code

def pickup(path):
    fp = file(path)
    wfp = file(path.replace("info", "txt"), "a")
    while True :
        mark = fp.read(2)  # one message's start and end mark
        if not mark:
            break
        fp.read(10)  # the ten chars are useless for pickup.
        flag = fp.read(1)  # send flag 80 end,00 receive
        message = ""
        while True:
            t = fp.read(2)
            if mark != t:
                message += t
            else:
                message = message.replace("\x20\x00", "")
                message = message.decode("UTF-16")  # if you have some function to convert the expression code to char code,plaese change this line "message=functionname(massage).decode("UTF-16")"
            if "\x80" == flag:
                wfp.write("SEND:" + message.encode("UTF-8") + "\r\n")
                print "SEND: ", message
            else:
                wfp.write("RECEIVE: " + message.encode("UTF-8") + "\r\n")
                print "RECEIVE:", message
            pass  # you can do more
            del message
            break
    fp.close()
    wfp.close()
    del mark, flag, wfp, fp

if __name__ == "__main__":
    print "Running--------"
    pickup("e:\\msg.info")
    print ":-" * 20&lt;/code&gt;&lt;/pre&gt;</content><category term="misc"></category></entry></feed>